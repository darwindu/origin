#spring
spring.profiles.active=dev
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/origin?useUnicode=true&characterEncoding=utf8
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
#初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
spring.datasource.druid.initial-size=5
#最小连接池数量
spring.datasource.druid.min-idle=5
#最大连接池数量
spring.datasource.druid.max-active=200
#获取连接时最大等待时间，单位毫秒。配置了maxWait之后， 缺省启用公平锁，并发效率会有所下降， 如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
spring.datasource.druid.max-wait=10000
#有两个含义： 1) Destroy线程会检测连接的间隔时间 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
spring.datasource.druid.time-between-eviction-runs-millis=10000
#
spring.datasource.druid.min-evictable-idle-time-millis=300000
#用来检测连接是否有效的sql，要求是一个查询语句。 如果validationQuery为null，testOnBorrow、testOnReturn、 testWhileIdle都不会其作用。
spring.datasource.druid.validation-query=SELECT 'x'
spring.datasource.druid.validation-query-timeout=20
#建议配置为true，不影响性能，并且保证安全性。 申请连接的时候检测，如果空闲时间大于 timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
spring.datasource.druid.test-while-idle=true
#申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
spring.datasource.druid.test-on-borrow=true
#归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
spring.datasource.druid.test-on-return=false
#是否缓存preparedStatement，也就是PSCache。 PSCache对支持游标的数据库性能提升巨大，比如说oracle。 在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。作者在5.5版本中使用PSCache，通过监控界面发现PSCache有缓存命中率记录， 该应该是支持PSCache。
spring.datasource.druid.pool-prepared-statements=true
#要启用PSCache，必须配置大于0，当大于0时， poolPreparedStatements自动触发修改为true。 在Druid中，不会存在Oracle下PSCache占用内存过多的问题， 可以把这个数值配置大一些，比如说100
spring.datasource.druid.max-pool-prepared-statement-per-connection-size=50
#属性类型是字符串，通过别名的方式配置扩展插件， 常用的插件有： 监控统计用的filter:stat  日志用的filter:log4j 防御sql注入的filter:wall
spring.datasource.druid.filters=stat
 
#log4j    
#logging.level.root=debug
#logging.level.cn.webank=debug
logging.config=classpath:log4j2.xml

#mybatis
mybatis.configLocation=classpath:mybatis/mybatis-config.xml
mybatis.mapperLocations=classpath:mybatis/*/*.xml

# executor thread pool
#线程池维护线程的最小数量. 
origin.common.threadpool.core-pool-size=48
#空闲线程的存活时间
origin.common.threadpool.keep-alive-seconds=60
#线程池维护线程的最大数量
origin.common.threadpool.max-pool-size=48
#队列最大长度 >=maxpoolsize
origin.common.threadpool.queue-capacity=300
#是否允许核心线程空闲退出，默认值为false
origin.common.threadpool.allow-core-thread-timeout=true
# 等待线程池关闭的最大时间，如果到时时间还没关闭，就直接退出，不再等待
origin.common.threadpool.await-termination-seconds=60
origin.common.threadpool.wait-for-task-to-complete-on-shutdown=true
#Reject策略预定义有四种： (1)ThreadPoolExecutor.AbortPolicy策略，是默认的策略,处理程序遭到拒绝将抛出运行时 RejectedExecutionException。 (2)ThreadPoolExecutor.CallerRunsPolicy策略 ,调用者的线程会执行该任务,如果执行器已关闭,则丢弃. (3)ThreadPoolExecutor.DiscardPolicy策略，不能执行的任务将被丢弃. (4)ThreadPoolExecutor.DiscardOldestPolicy策略，如果执行程序尚未关闭，则位于工作队列头部的任务将被删除，然后重试执行程序（如果再次失败，则重复此过程）.
#origin.common.taskexecutor.rejectedExecutionHandler=CallerRunsPolicy

# cache:CAFFEINE GUAVA EHCACHE
#spring.cache.type=EHCACHE
spring.cache.cache-names=demo,demo1
#spring.cache.guava.spec=maximumSize=500,expireAfterWrite=1s
#spring.cache.guava.spec=maximumSize=500,expireAfterAccess=5s
spring.cache.caffeine.spec=maximumSize=1,expireAfterWrite=10s
#wbap.ats.cache.cardinfolist.spec=concurrencyLevel=50,initialCapacity=100,maximumSize=1000,expireAfterWrite=30m
#spring.cache.ehcache.config=classpath:ehcache.xml


#spring.mvc.view.prefix=/WEB-INF/jsp/
#spring.mvc.view.suffix=.jsp

########################################################  
###THYMELEAF (ThymeleafAutoConfiguration)  
########################################################  
#spring.thymeleaf.prefix=classpath:/templates/
#spring.thymeleaf.suffix=.html
#spring.thymeleaf.mode=HTML5
#spring.thymeleaf.encoding=UTF-8
#spring.thymeleaf.content-type=text/html
#spring.thymeleaf.cache=false